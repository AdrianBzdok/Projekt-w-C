<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.0"/>
    <errors>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose="scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" cwe="119" sinceDate="24.05.2020">
            <location file0="main.c" file="komunikacja.h" line="51"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose="scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" cwe="119" sinceDate="24.05.2020">
            <location file0="main.c" file="komunikacja.h" line="95"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose="scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c" cwe="119" sinceDate="24.05.2020">
            <location file0="main.c" file="kopia.h" line="62"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;a&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;a&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" sinceDate="24.05.2020">
            <location file0="main.c" file="kopia.h" line="13"/>
        </error>
        <error id="checkCastIntToCharAndBack" severity="warning" msg="Storing fgetc() return value in char variable and then comparing with EOF." verbose="When saving fgetc() return value in char variable there is loss of precision.  When fgetc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop &amp;quot;while (EOF != (c = fgetc());&amp;quot; loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character." cwe="197" sinceDate="24.05.2020">
            <location file0="main.c" file="odczyt.h" line="31"/>
        </error>
        <error id="checkCastIntToCharAndBack" severity="warning" msg="Storing fgetc() return value in char variable and then comparing with EOF." verbose="When saving fgetc() return value in char variable there is loss of precision.  When fgetc() returns EOF this value is truncated. Comparing the char variable with EOF can have unexpected results. For instance a loop &amp;quot;while (EOF != (c = fgetc());&amp;quot; loops forever on some compilers/platforms and on other compilers/platforms it will stop when the file contains a matching character." cwe="197" sinceDate="24.05.2020">
            <location file0="main.c" file="odczyt.h" line="51"/>
        </error>
    </errors>
</results>
